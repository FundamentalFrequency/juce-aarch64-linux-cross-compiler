# common functions for separate server config

add_servers() {
	if [ -f "$SERVERFILE" ] && [ "$new_ntp_servers" = "$old_ntp_servers" ]; then
		return
	fi

	rm -f "$SERVERFILE"

	if [ -n "$new_ntp_servers" ]; then
		rebuild_config
	fi

	reload_config
}

remove_servers() {
	local update_required
	if [ -f "$SERVERFILE_IPV4" ]; then
		rm -f "$SERVERFILE_IPV4"
		update_required=1
	fi
	if [ -f "$SERVERFILE_IPV6" ]; then
		rm -f "$SERVERFILE_IPV6"
		update_required=1
	fi
	if [ -n "$update_required" ]; then
		reload_config
	fi
}

handle_reason() {
	case "$reason" in
		BOUND6|RENEW6|REBIND6|REBOOT6|INFORM6)
			SERVERFILE="$SERVERFILE_IPV6"
			new_ntp_servers="$new_dhcp6_sntp_servers"
			old_ntp_servers="$old_dhcp6_sntp_servers"
			add_servers
			;;
		BOUND|RENEW|REBIND|REBOOT)
			SERVERFILE="$SERVERFILE_IPV4"
			add_servers
			;;
		EXPIRE|FAIL|RELEASE|STOP)
			remove_servers
			;;
	esac
}

# common functions for combined server config

start_mark="# dhcpcd $interface start"
end_mark="# dhcpcd $interface end"

# inserts a server configuration into the SERVERFILE
# takes an optional argument to indicate server options
insert_servers() {
	local tmpfile
	tmpfile=$(mktemp)
	local protocol='IPv4'
	if echo "$reason" | grep -q 6$; then
		protocol='IPv6'
	fi
	# update section for this interface and protocol
	if [ -f "$SERVERFILE" ]; then
		sed "/^$start_mark $protocol/,/^$end_mark $protocol/d" "$SERVERFILE" > "$tmpfile"
	fi
	# clean up and bail early if there's nothing else to do
	if [ -z "$new_ntp_servers" ] && [ ! -s "$tmpfile" ]; then
		rm -f "$SERVERFILE" "$tmpfile"
		return
	fi
	# otherwise update SERVERFILE
	if [ -n "$new_ntp_servers" ]; then
		echo "$start_mark $protocol" >> "$tmpfile"
		for server in $new_ntp_servers; do
			echo "server $server${1:+ $1}" >> "$tmpfile"
		done
		echo "$end_mark $protocol" >> "$tmpfile"
	fi
	# preserve permissions if possible
	if [ -f "$SERVERFILE" ]; then
		chown --reference="$SERVERFILE" "$tmpfile"
		chmod --reference="$SERVERFILE" "$tmpfile"
	fi
	mv "$tmpfile" "$SERVERFILE"
}

withdraw_servers() {
	if [ ! -f "$SERVERFILE" ]; then
		return
	fi
	local tmpfile
	tmpfile=$(mktemp)
	sed "/^$start_mark/,/^$end_mark/d" "$SERVERFILE" > "$tmpfile"
	# remove the SERVERFILE if there's nothing to put in it
	if [ ! -s "$tmpfile" ]; then
		rm -f "$SERVERFILE" "$tmpfile"
	else
		# otherwise update SERVERFILE
		chown --reference="$SERVERFILE" "$tmpfile"
		chmod --reference="$SERVERFILE" "$tmpfile"
		mv "$tmpfile" "$SERVERFILE"
	fi
}
# vi: ft=sh
